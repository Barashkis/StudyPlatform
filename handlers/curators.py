from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold
from aiogram.utils.exceptions import BotBlocked

from keyboards import curator_kb, curator_cd, homework_cd, send_message_kb, homeworks_to_check_kb, send_feedback_kb
from loader import dp, db, bot


async def students_list_message():
    students = await db.get_users("Students")

    if not len(students):
        await types.CallbackQuery.get_current().answer()
        await types.CallbackQuery.get_current().message.edit_text("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...",
                                                                  reply_markup=curator_kb)

        return

    text = [f"{student[0]}. {student[1]['full_name']}, email - {student[1]['email']} (–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞)" if student[1]["leave"]
            else f"{student[0]}. {student[1]['full_name']}"
            for student in enumerate(students, start=1)]

    return text


@dp.callback_query_handler(curator_cd.filter(feature="faq"))
async def faq(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("‚ùì FAQ\n\n"
                                 "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–∞—Ç-–±–æ—Ç–æ–º\n\n"
                                 f"–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('¬´–ú–æ—è –≥—Ä—É–ø–ø–∞¬ª')}. "
                                 "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞ —Ç–∞–∫–∂–µ —Å–≤–µ–¥–µ–Ω–∏—è, –Ω–∞ –∫–∞–∫–æ–º "
                                 "—É—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n"
                                 "–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–¥–Ω–∏–º –∏–ª–∏ –≤—Å–µ–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                 f"{hbold('¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏¬ª')}. –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ "
                                 f"—Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–±–æ—Ç–µ\n\n"
                                 "–°—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–∏—Å—ã–ª–∞—é—Ç –≤–∞–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ "
                                 f"–∑–∞–¥–∞–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('¬´–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π¬ª')}. "
                                 f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ "
                                 "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é\n\n",
                                 reply_markup=curator_kb)


@dp.callback_query_handler(curator_cd.filter(feature="students_list"))
async def group_list(call: types.CallbackQuery, state: FSMContext):
    text = await students_list_message()

    if not text:
        return

    text.insert(0, "üìã –°–ü–ò–°–û–ö –ì–†–£–ü–ü–´\n")

    await call.message.edit_text("\n".join(text))
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ {hbold('–Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞')}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å\n\n"
                              f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö,"
                              f" –≤–≤–µ–¥–∏—Ç–µ –∏—Ö {hbold('–Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 3 7)\n\n"
                              f"–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ: {hbold('all')}")

    await state.set_state("choose_students_info")


@dp.message_handler(state="choose_students_info")
async def show_students(message: types.Message, state: FSMContext):
    await state.reset_state(with_data=False)

    text = message.text
    selected_id = set(text.split())
    students = await db.get_users("Students")
    edge = len(students)
    lessons = await db.get_lessons()
    result_message = []

    if text == "all":
        for student in enumerate(students, start=1):
            chat_id = student[1]['chat_id']
            lesson = await db.get_current_lesson(chat_id)

            result_message.append(f"{student[0]}. {student[1]['full_name']}\n"
                                  f"–°–µ–π—á–∞—Å –∏–∑—É—á–∞–µ—Ç —É—Ä–æ–∫ ‚Ññ{lesson['id']} - \'{lesson['title']}\'\n"
                                  f"–ü—Ä–æ–≥—Ä–µ—Å—Å - {int(student[1]['passed_lessons'] / len(lessons) * 100)}%\n"
                                  f"–ò–º—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ - {student[1]['full_name_tg']}\n")

        result_message.insert(0, "üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–£–î–ï–ù–¢–ê–•\n")

        await message.answer("\n".join(result_message),
                             reply_markup=curator_kb)
    else:
        selected_id = list(map(int, selected_id))
        list_is_correct_id = map(lambda x: 1 <= x <= edge, selected_id)

        if all(list_is_correct_id):
            for student_id in enumerate(selected_id, start=1):
                chat_id = students[student_id[1] - 1]['chat_id']
                lesson = await db.get_current_lesson(chat_id)

                result_message.append(f"{student_id[0]}. {students[student_id[1] - 1]['full_name']}\n"
                                      f"–°–µ–π—á–∞—Å –∏–∑—É—á–∞–µ—Ç —É—Ä–æ–∫ ‚Ññ{lesson['id']} - \'{lesson['title']}\'\n"
                                      f"–ü—Ä–æ–≥—Ä–µ—Å—Å - {int(students[student_id[1] - 1]['passed_lessons'] / len(lessons) * 100)}%\n"
                                      f"–ò–º—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ - {students[student_id[1] - 1]['full_name_tg']}\n")

            result_message.insert(0, "üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–£–î–ï–ù–¢–ê–•\n")

            await message.answer("\n".join(result_message),
                                 reply_markup=curator_kb)
        else:
            raise ValueError


@dp.callback_query_handler(curator_cd.filter(feature="connect_student"))
async def connect_student(call: types.CallbackQuery, state: FSMContext):
    text = await students_list_message()

    if not text:
        return

    text.insert(0, "ü§ù –°–í–Ø–ó–ê–¢–¨–°–Ø –°–û –°–¢–£–î–ï–ù–¢–û–ú\n")

    await call.message.edit_text("\n".join(text))
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ {hbold('–Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞')}, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                              f"–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö {hbold('–Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')} "
                              f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 3 7)\n\n"
                              f"–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ: {hbold('all')}")

    await state.set_state("choose_students_connect")


@dp.message_handler(state="choose_students_connect")
async def select_students_to_connect(message: types.Message, state: FSMContext):
    text = message.text
    selected_id = set(text.split())
    students = await db.get_users("Students")
    edge = len(students)

    if text == "all":
        async with state.proxy() as data:
            data["to_connect"] = list(range(1, edge + 1))
    else:
        selected_id = list(map(int, selected_id))
        list_is_correct_id = map(lambda x: 1 <= x <= edge, selected_id)

        if all(list_is_correct_id):
            async with state.proxy() as data:
                data["to_connect"] = selected_id
        else:
            raise ValueError

    await state.reset_state(with_data=False)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ—Å–ª–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º")

    await state.set_state("message")


@dp.message_handler(state="message")
async def select_students_to_connect(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["message"] = message.text
    await state.reset_state(with_data=False)

    await message.answer("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ? –î–∞–ª—å—à–µ –í—ã –Ω–∏–∫–∞–∫ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ",
                         reply_markup=send_message_kb)


@dp.callback_query_handler(curator_cd.filter(feature="message"))
async def send_message_to_student(call: types.CallbackQuery, state: FSMContext):
    curator_chat_id = call.from_user.id
    curator = await db.get_user("Curators", curator_chat_id)

    await state.set_state("message")
    data = await state.get_data()
    text = f"üìß –¢–ï–ë–ï –ü–†–ò–®–õ–û –°–û–û–ë–©–ï–ù–ò–ï\n\n" \
           f"–ö—É—Ä–∞—Ç–æ—Ä {curator['full_name']} –Ω–∞–ø–∏—Å–∞–ª:\n" \
           f"{data['message']}"

    await state.set_state("choose_students_connect")
    data = await state.get_data()
    to_connect = data["to_connect"]
    await state.reset_state(with_data=False)

    students = await db.get_users("Students")
    for student_id in to_connect:
        student = students[student_id - 1]
        chat_id = student["chat_id"]

        try:
            await bot.send_message(chat_id, text)
        except BotBlocked as ex:
            print(ex)

    await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                                 reply_markup=curator_kb)


@dp.callback_query_handler(curator_cd.filter(feature="check_tasks"))
async def show_homeworks_to_check(call: types.CallbackQuery):
    await call.answer()

    kb = await homeworks_to_check_kb()

    if kb["inline_keyboard"]:
        await call.message.edit_text("–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∏–º–µ—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. "
                                     "–í—ã–±–µ—Ä–µ—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                     reply_markup=kb)
    else:
        await call.message.edit_text("–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç...",
                                     reply_markup=curator_kb)


@dp.callback_query_handler(homework_cd.filter())
async def check_homework(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    homework_id = int(callback_data["homework_id"])

    await state.set_state("choose_student_homework_feedback")
    async with state.proxy() as data:
        data["homework_id"] = homework_id

    answers = await db.get_answers(homework_id)

    text = []
    for answer in enumerate(answers, start=1):
        chat_id = answer[1]["student_chat_id"]
        student = await db.get_user("Students", chat_id)
        text.append(f"{answer[0]}. –°—Ç—É–¥–µ–Ω—Ç {student['full_name']}")
    text.insert(0, "‚úç –û–¢–í–ï–¢–´, –ö–û–¢–û–†–´–ï –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨\n")

    await call.message.edit_text("\n".join(text))
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞,–æ—Ç–≤–µ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")


@dp.message_handler(state="choose_student_homework_feedback")
async def select_student_to_homework_feedback(message: types.Message, state: FSMContext):
    data = await state.get_data()
    homework_id = data["homework_id"]

    answer_id = int(message.text)
    answers = await db.get_answers(homework_id)
    edge = len(answers)

    if 1 <= answer_id <= edge:
        async with state.proxy() as data:
            data["to_feedback"] = answer_id
    else:
        raise ValueError

    await state.reset_state(with_data=False)

    answer = answers[answer_id - 1]
    chat_id = answer["student_chat_id"]
    student = await db.get_user("Students", chat_id)

    answer_text = f"–û–¢–í–ï–¢ –°–¢–£–î–ï–ù–¢–ê - {student['full_name']}\n\n"
    if answer["text"]:
        answer_text += answer["text"]

    if answer["video"]:
        await message.answer_video(video=answer["video"],
                                   caption=answer_text)
    elif answer["photo"]:
        await message.answer_photo(photo=answer["photo"],
                                   caption=answer_text)
    elif answer["document"]:
        await message.answer_document(document=answer["document"],
                                      caption=answer_text)
    else:
        await message.answer(answer_text)

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É")
    await state.set_state("feedback")


@dp.message_handler(state="feedback")
async def select_students_to_connect(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["message"] = message.text
    await state.reset_state(with_data=False)

    await message.answer("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ? –î–∞–ª—å—à–µ –í—ã –Ω–∏–∫–∞–∫ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ",
                         reply_markup=send_feedback_kb)


@dp.callback_query_handler(curator_cd.filter(feature="feedback"))
async def send_message_to_student(call: types.CallbackQuery, state: FSMContext):
    curator_chat_id = call.from_user.id
    curator = await db.get_user("Curators", curator_chat_id)

    await state.set_state("choose_student_homework_feedback")
    data = await state.get_data()
    homework_id = data["homework_id"]
    to_feedback = int(data["to_feedback"])

    await state.set_state("feedback")
    data = await state.get_data()
    text = f"üìß –†–ï–¶–ï–ù–ó–ò–Ø –ù–ê –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï ‚Ññ{homework_id}\n\n" \
           f"–ö—É—Ä–∞—Ç–æ—Ä {curator['full_name']} –Ω–∞–ø–∏—Å–∞–ª:\n" \
           f"{data['message']}"
    await state.reset_state(with_data=False)

    students = await db.get_users("Students")
    student = students[to_feedback - 1]
    chat_id = student["chat_id"]

    answer = await db.get_answer(chat_id)

    try:
        if not answer["checked"]:
            await db.check_answer(chat_id, homework_id)
            await bot.send_message(chat_id, text)

            await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                                         reply_markup=curator_kb)
        else:
            await call.message.edit_text("–û—Ç–≤–µ—Ç —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥—Ä—É–≥–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º",
                                         reply_markup=curator_kb)
    except BotBlocked:
        await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. "
                                     "–û–¥–Ω–∞–∫–æ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ",
                                     reply_markup=curator_kb)


@dp.callback_query_handler(curator_cd.filter(feature="menu"))
async def back_to_curator_menu(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                                 reply_markup=curator_kb)
