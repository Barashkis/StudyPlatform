from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold
from aiogram.utils.exceptions import MessageTextIsEmpty

from keyboards import student_kb, education_program_kb, homework_kb, send_homework_kb, student_cd, archive_lessons_kb
from loader import dp, db


@dp.callback_query_handler(student_cd.filter(feature="faq"))
async def faq(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("‚ùì FAQ\n\n"
                                 "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ —á–∞—Ç-–±–æ—Ç–∞:\n"
                                 "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞, –Ω–∞–∂–º–∏ "
                                 f"–Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('¬´–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è¬ª')}\n\n"
                                 f"–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('¬´–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ¬ª')}, "
                                 f"—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n\n"
                                 f"–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('¬´–°–¥–∞—Ç—å¬ª')} –∏ "
                                 "–æ—Ç–ø—Ä–∞–≤–ª—è–π –±–æ—Ç—É –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª. –ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç "
                                 "–¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
                                 f"–ï—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º {hbold('¬´–†–ï–¶–ï–ù–ó–ò–Ø¬ª')} ‚Äî —ç—Ç–æ –æ—Ç–≤–µ—Ç —Ç–≤–æ–µ–≥–æ "
                                 f"–∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–≤–æ—ë –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –ö—É—Ä–∞—Ç–æ—Ä —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å "
                                 f"—Ç–µ–±–µ –ø—É—à-—Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–∂–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏\n\n"
                                 f"–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ–±—Å—É–¥–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å "
                                 f"–Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('¬´–°–≤—è–∑—å –≤ –∫—É—Ä–∞—Ç–æ—Ä–æ–º¬ª')} –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ "
                                 f"–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–≤–æ–∏–º "
                                 f"–∫—É—Ä–∞—Ç–æ—Ä–æ–º. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–æ–π, "
                                 f"–¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ú–æ—è –≥—Ä—É–ø–ø–∞¬ª\n\n"
                                 f"–í—Å–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–∞–≤ –Ω–∞ "
                                 f"–∫–Ω–æ–ø–∫—É {hbold('¬´–ê—Ä—Ö–∏–≤¬ª')}. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å "
                                 f"–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª—é–±–æ–º—É —É—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n\n"
                                 "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É, –ø–æ–∫–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ "
                                 "–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫—É—Ä–∞—Ç–æ—Ä—É\n\n"
                                 "–£–¥–∞—á–∏!",
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter(feature="check_marks"))
async def check_marks(call: types.CallbackQuery):
    chat_id = call.from_user.id
    user = await db.get_user("Students", chat_id)
    lessons = await db.get_lessons()

    await call.answer()
    await call.message.edit_text(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ô–î–ï–ù–ù–´–• –ó–ê–ù–Ø–¢–ò–ô\n\n"
                                 f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {int(user['passed_lessons'] / len(lessons) * 100)}%",
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter(feature="connect_curator"))
async def connect_curator(call: types.CallbackQuery):
    curators = await db.get_users("Curators")

    if curators:
        text = [
            str(curator[0]) + ". " + f"{curator[1]['full_name']} - @{curator[1]['username']}" if curator[1]['username']
            else f"{curator[0]}. {curator[1]['full_name']} - {curator[1]['full_name_tg']}"
            for curator in enumerate(curators, start=1)]
        text.insert(0, "üë®‚Äçüíª –ö–û–ù–¢–ê–ö–¢–´ –ö–£–†–ê–¢–û–†–û–í\n")
    else:
        text = ["–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤..."]

    await call.answer()
    await call.message.edit_text("\n".join(text),
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter(feature="education_program"))
async def education_program(call: types.CallbackQuery):
    chat_id = call.from_user.id

    current_lesson = await db.get_current_lesson(chat_id)

    if current_lesson["homework_id"]:
        kb = education_program_kb()
    else:
        kb = education_program_kb(has_homework=False)

    await call.answer()
    await call.message.edit_text(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê\n\n"
                                 f"–£—Ä–æ–∫ ‚Ññ{current_lesson['id']}. {current_lesson['title']}\n\n"
                                 f"{current_lesson['text']}",
                                 reply_markup=kb)


@dp.callback_query_handler(student_cd.filter(feature="next_lesson"))
async def display_next_lesson(call: types.CallbackQuery):
    chat_id = call.from_user.id
    user = await db.get_user("Students", chat_id)
    lessons = await db.get_lessons()

    if user["passed_lessons"] == user["current_lesson_id"] == len(lessons):
        await call.answer("–ù–∞—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –≤—Å–µ —É—Ä–æ–∫–∏üëè\n"
                          "–¢–µ–ø–µ—Ä—å –¥–µ–ª–æ –∑–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏: –æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –≤—Å–µ "
                          "—Ä–∞–±–æ—Ç—ã –∏ –≤—Å–∫–æ—Ä–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!",
                          show_alert=True)
    elif user["passed_lessons"] == user["current_lesson_id"]:
        await db.update_current_lesson_id(chat_id)

        current_lesson = await db.get_current_lesson(chat_id)

        if current_lesson["homework_id"]:
            kb = education_program_kb()
        else:
            await db.pass_homework(chat_id)
            kb = education_program_kb(has_homework=False)

        await call.answer()
        await call.message.edit_text(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê\n\n"
                                     f"–£—Ä–æ–∫ ‚Ññ{current_lesson['id']}. {current_lesson['title']}\n\n"
                                     f"{current_lesson['text']}",
                                     reply_markup=kb)
    else:
        await call.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É!",
                          show_alert=True)


@dp.callback_query_handler(student_cd.filter(feature="homework"))
async def open_homework(call: types.CallbackQuery):
    chat_id = call.from_user.id
    user = await db.get_user("Students", chat_id)

    if user["passed_lessons"] == user["current_lesson_id"]:
        await call.answer("–¢—ã —É–∂–µ —Å–¥–∞–ª —ç—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!",
                          show_alert=True)
    else:
        homework = await db.get_current_homework(chat_id)

        await call.message.edit_text(f"‚úç –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï ‚Ññ{homework['id']}\n\n"
                                     f"{homework['text']}",
                                     reply_markup=homework_kb)


@dp.callback_query_handler(student_cd.filter(feature="input_homework"))
async def input_homework(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer("–¢–≤–æ–π –æ—Ç–≤–µ—Ç")

    await state.set_state("input_answer")


@dp.message_handler(state="input_answer", content_types=types.ContentTypes.TEXT | types.ContentTypes.PHOTO |
                    types.ContentTypes.VIDEO | types.ContentTypes.DOCUMENT)
async def last_chance_homework(message: types.Message, state: FSMContext):
    await state.reset_state(with_data=False)

    answer = {
        "text": None,
        "photo": None,
        "video": None,
        "document": None
    }
    try:
        answer["text"] = message.caption
    except MessageTextIsEmpty:
        pass

    if message.content_type == "text":
        answer["text"] = message.text
    elif message.content_type == "photo":
        answer["photo"] = message.photo[-1].file_id
    elif message.content_type == "video":
        answer["video"] = message.video.file_id
    else:
        answer["document"] = message.document.file_id

    async with state.proxy() as data:
        data["answer"] = answer

    await message.answer("–¢—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ? –î–∞–ª—å—à–µ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–µ —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ",
                         reply_markup=send_homework_kb)


@dp.message_handler(state="input_answer", content_types=types.ContentType.ANY)
async def last_chance_homework_any(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å "
                         "–º–Ω–µ —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (1 —à—Ç.)")


@dp.callback_query_handler(student_cd.filter(feature="send_homework"))
async def send_homework(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    answer = data["answer"]
    text = answer["text"]
    photo = answer["photo"]
    video = answer["video"]
    document = answer["document"]

    chat_id = call.from_user.id
    homework = await db.get_current_homework(chat_id)
    homework_id = homework["id"]

    await db.add_answer(chat_id, text, photo, video, document, homework_id)
    await db.pass_homework(chat_id)

    user = await db.get_user("Students", chat_id)
    current_lesson_id = user["current_lesson_id"]

    current_lesson = await db.get_current_lesson(chat_id)

    kb = education_program_kb()

    await call.message.edit_text(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê\n\n"
                                 f"–£—Ä–æ–∫ ‚Ññ{current_lesson_id}. {current_lesson['title']}\n\n"
                                 f"{current_lesson['text']}",
                                 reply_markup=kb)


@dp.callback_query_handler(student_cd.filter(feature="menu"))
async def back_to_student_menu(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter())
async def display_archive(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    feature = callback_data["feature"]

    if feature == "archive":
        async with state.proxy() as data:
            if data.get("archive_lesson_id") is None:
                data["archive_lesson_id"] = 1
    elif feature == "next_archive":
        async with state.proxy() as data:
            data["archive_lesson_id"] += 1
    else:
        async with state.proxy() as data:
            data["archive_lesson_id"] -= 1

    data = await state.get_data()
    archive_lesson_id = data["archive_lesson_id"]

    archive_lesson = await db.get_lesson(archive_lesson_id)

    chat_id = call.from_user.id
    current_lesson = await db.get_current_lesson(chat_id)
    current_lesson_id = current_lesson["id"]

    archive_kb = archive_lessons_kb(archive_lesson_id, current_lesson_id)

    await call.answer()
    await call.message.edit_text(f"üì¶ –ê–†–•–ò–í\n\n"
                                 f"–£—Ä–æ–∫ ‚Ññ{archive_lesson['id']}. {archive_lesson['title']}\n\n"
                                 f"{archive_lesson['text']}",
                                 reply_markup=archive_kb)
