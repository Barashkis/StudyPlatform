from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards import student_kb, education_program_kb, homework_kb, send_homework_kb, student_cd
from loader import dp, db


@dp.callback_query_handler(student_cd.filter(feature="faq"))
async def faq(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("‚ùì FAQ\n\n"
                                 "–í–æ–ø—Ä–æ—Å ‚Ññ1. –ú–æ–∂–Ω–æ, –Ω–µ —Å–¥–∞–≤–∞—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–Ω—è—Ç–∏—é?\n"
                                 "–û—Ç–≤–µ—Ç. –ù–µ—Ç, –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
                                 "–í–æ–ø—Ä–æ—Å ‚Ññ2. –í—Å–µ –ª–∏ –∑–∞–¥–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?\n"
                                 "–û—Ç–≤–µ—Ç. –î–∞. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞—á–µ—Ç, –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –≤—Å–µ. –ü–æ—Ç–æ–º –∫—É—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ—Å—É–º–º–∏—Ä—É—é—Ç "
                                 "–±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É\n\n"
                                 "–í–æ–ø—Ä–æ—Å ‚Ññ3. –ë—É–¥–µ—Ç –ª–∏ –∫—É—Ä–∞—Ç–æ—Ä –ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–æ –ø–æ–≤–æ–¥—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è?\n"
                                 "–û—Ç–≤–µ—Ç. –î–∞. –£ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º "
                                 "—á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Ç–∞–∫ —á—Ç–æ –Ω–µ –≤—ã–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–≤–æ–∏—Ö –¥–æ–º–∞—à–µ–∫!",
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter(feature="check_marks"))
async def check_marks(call: types.CallbackQuery):
    chat_id = call.from_user.id
    user = await db.get_user("Students", chat_id)
    lessons = await db.get_lessons()

    await call.answer()
    await call.message.edit_text(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ô–î–ï–ù–ù–´–• –ó–ê–ù–Ø–¢–ò–ô\n\n"
                                 f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {int(user['passed_homeworks'] / len(lessons) * 100)}%",
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter(feature="connect_curator"))
async def connect_curator(call: types.CallbackQuery):
    curators = await db.get_users("Curators")

    if curators:
        text = [
            str(curator[0]) + ". " + f"{curator[1]['full_name']} - @{curator[1]['username']}" if curator[1]['username']
            else f"{curator[0]}. {curator[1]['full_name']} - {curator[1]['full_name_tg']}"
            for curator in enumerate(curators, start=1)]
        text.insert(0, "üë®‚Äçüíª –ö–û–ù–¢–ê–ö–¢–´ –ö–£–†–ê–¢–û–†–û–í\n")
    else:
        text = ["–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤..."]

    await call.answer()
    await call.message.edit_text("\n".join(text),
                                 reply_markup=student_kb)


@dp.callback_query_handler(student_cd.filter(feature="education_program"))
async def education_program(call: types.CallbackQuery):
    chat_id = call.from_user.id

    current_lesson = await db.get_current_lesson(chat_id)

    if current_lesson["homework_id"]:
        kb = education_program_kb()
    else:
        kb = education_program_kb(False)

    await call.answer()
    await call.message.edit_text(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê\n\n"
                                 f"–£—Ä–æ–∫ ‚Ññ{current_lesson['id']}. {current_lesson['title']}\n\n"
                                 f"{current_lesson['text']}",
                                 reply_markup=kb)


@dp.callback_query_handler(student_cd.filter(feature="next_lesson"))
async def display_next_lesson(call: types.CallbackQuery):
    chat_id = call.from_user.id
    user = await db.get_user("Students", chat_id)
    lessons = await db.get_lessons()

    if user["passed_homeworks"] == user["current_lesson_id"] == len(lessons):
        await call.answer("–ù–∞—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –≤—Å–µ —É—Ä–æ–∫–∏!üëè\n"
                          "–¢–µ–ø–µ—Ä—å –¥–µ–ª–æ –∑–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏: –æ–Ω–∏ –ø—Ä–æ—Å—É–º–º–∏—Ä—É—é—Ç –±–∞–ª–ª—ã –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã "
                          "–∏ –≤—ã—Å—Ç–∞–≤—è—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É",
                          show_alert=True)
    elif user["passed_homeworks"] == user["current_lesson_id"]:
        await db.update_current_lesson_id(chat_id)

        current_lesson = await db.get_current_lesson(chat_id)

        if current_lesson["homework_id"]:
            kb = education_program_kb()
        else:
            await db.pass_homework(chat_id)
            kb = education_program_kb(False)

        await call.answer()
        await call.message.edit_text(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê\n\n"
                                     f"–£—Ä–æ–∫ ‚Ññ{current_lesson['id']}. {current_lesson['title']}\n\n"
                                     f"{current_lesson['text']}",
                                     reply_markup=kb)
    else:
        await call.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É!",
                          show_alert=True)


@dp.callback_query_handler(student_cd.filter(feature="homework"))
async def open_homework(call: types.CallbackQuery):
    chat_id = call.from_user.id
    user = await db.get_user("Students", chat_id)

    if user["passed_homeworks"] == user["current_lesson_id"]:
        await call.answer("–¢—ã —É–∂–µ —Å–¥–∞–ª —ç—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!",
                          show_alert=True)
    else:
        homework = await db.get_current_homework(chat_id)

        await call.message.edit_text(f"‚úç –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï ‚Ññ{homework['homework_id']}\n\n"
                                     f"{homework['text']}",
                                     reply_markup=homework_kb)


@dp.callback_query_handler(student_cd.filter(feature="input_homework"))
async def input_homework(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç")

    await state.set_state("input_answer")


@dp.message_handler(state="input_answer")
async def last_chance_homework(message: types.Message, state: FSMContext):
    await state.finish()

    async with state.proxy() as data:
        data["answer"] = message.text

    await message.answer("–¢—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ? –î–∞–ª—å—à–µ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–µ —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ",
                         reply_markup=send_homework_kb)


@dp.callback_query_handler(student_cd.filter(feature="send_homework"))
async def send_homework(call: types.CallbackQuery, state: FSMContext):
    await state.set_state("input_answer")

    data = await state.get_data()
    answer = data["answer"]

    await state.finish()

    chat_id = call.from_user.id
    homework = await db.get_current_homework(chat_id)
    homework_id = homework["homework_id"]

    await db.add_answer(chat_id, answer, homework_id)
    await db.pass_homework(chat_id)

    user = await db.get_user("Students", chat_id)
    current_lesson_id = user["current_lesson_id"]

    current_lesson = await db.get_current_lesson(chat_id)

    if current_lesson["homework_id"]:
        kb = education_program_kb()
    else:
        kb = education_program_kb(False)

    await call.message.edit_text(f"üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê\n\n"
                                 f"–£—Ä–æ–∫ ‚Ññ{current_lesson_id}. {current_lesson['title']}\n\n"
                                 f"{current_lesson['text']}",
                                 reply_markup=kb)


@dp.callback_query_handler(student_cd.filter(feature="menu"))
async def back_to_student_menu(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                                 reply_markup=student_kb)
